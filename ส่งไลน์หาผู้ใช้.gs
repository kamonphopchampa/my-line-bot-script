// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á Trigger ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 08:00)
function createDailyTrigger2() {
  ScriptApp.newTrigger('sendMedicalReminders')
    .timeBased()
    .everyDays(1)
    .atHour(8) // 8 ‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤
    .create();
  
  Logger.log("‡∏™‡∏£‡πâ‡∏≤‡∏á Daily Trigger ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 08:00");
}/**
 * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢.gs - ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡πå
 * ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå "‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå.gs":
 * - SHEET_ID
 * - CHANNEL_ACCESS_TOKEN  
 * - MONTH_NAMES_TH
 */

function sendMedicalReminders1() {
  const ss = SpreadsheetApp.openById(SHEET_ID);
  const today = new Date();
  
  // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  for (let monthIndex = 0; monthIndex < 12; monthIndex++) {
    const monthName = MONTH_NAMES_TH[monthIndex];
    const sheetName = monthName; // ‡∏´‡∏£‡∏∑‡∏≠ "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" + monthName ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ
    
    const sheet = ss.getSheetByName(sheetName);
    if (!sheet) {
      Logger.log("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó: " + sheetName);
      continue;
    }
    
    Logger.log("‡∏û‡∏ö‡∏ä‡∏µ‡∏ó: " + sheetName + " - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...");
    checkAppointmentReminders(sheet, today);
  }
}

function checkAppointmentReminders(sheet, today) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ sheet ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!sheet) {
    Logger.log("Sheet is null or undefined");
    return;
  }

  const lastRow = sheet.getLastRow();
  Logger.log(`‡∏ä‡∏µ‡∏ó ${sheet.getName()} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${lastRow} ‡πÅ‡∏ñ‡∏ß`);
  
  if (lastRow < 2) {
    Logger.log("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó " + sheet.getName());
    return; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  const dataRange = sheet.getRange("A2:I" + lastRow);
  const data = dataRange.getValues();
  
  for (let i = 0; i < data.length; i++) {
    const row = data[i];
    const appointmentDate = row[0]; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
    const time = row[1];           // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B - ‡πÄ‡∏ß‡∏•‡∏≤
    const hn = row[2];             // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C - HN
    const patientName = row[3];    // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D - ‡∏ä‡∏∑‡πà‡∏≠
    const details = row[4];        // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå E - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    const phone = row[5];          // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå F - ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    const userId = row[6];         // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G - USER ID
    const notes = row[7];          // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
    const reminderDate = row[8];   // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå I - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏ó‡∏£‡∏ô‡∏±‡∏î/‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!appointmentDate || !patientName || !reminderDate) {
      Logger.log(`‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß ${i+2}: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î:${appointmentDate}, ‡∏ä‡∏∑‡πà‡∏≠:${patientName}, ‡∏ß‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:${reminderDate}`);
      continue;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö User ID ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    const userIdStr = userId ? userId.toString().trim() : "";
    if (!userIdStr || userIdStr === "") {
      Logger.log(`‚ö†Ô∏è  ‡πÅ‡∏ñ‡∏ß ${i+2} (${patientName}): ‡πÑ‡∏°‡πà‡∏°‡∏µ User ID - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`);
      // ‡∏≠‡∏¢‡πà‡∏≤ continue ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const reminderDateObj = new Date(reminderDate);
    const todayString = formatDateForComparison(today);
    const reminderDateString = formatDateForComparison(reminderDateObj);
    
    Logger.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ñ‡∏ß ${i+2} (${patientName}): ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ=${todayString}, ‡∏ß‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô=${reminderDateString}, User ID=${userIdStr || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    
    if (todayString === reminderDateString) {
      if (userIdStr && userIdStr !== "") {
        Logger.log(`‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ ${patientName} (${userIdStr})`);
        sendAppointmentReminder(userIdStr, appointmentDate, time, patientName, details, phone, hn);
        Utilities.sleep(500); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limit
      } else {
        Logger.log(`‚ùå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ User ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${patientName}`);
      }
    }
  }
}

function formatDateForComparison(date) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Date object ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!date || !(date instanceof Date) || isNaN(date.getTime())) {
    Logger.log(`‚ùå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${date}`);
    return null;
  }

  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®. ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  const adjustedYear = year > 2500 ? year - 543 : year;
  
  const result = `${adjustedYear}-${month}-${day}`;
  Logger.log(`üìÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${date} -> ${result}`);
  return result;
}

function sendAppointmentReminder(userId, appointmentDate, time, patientName, details, phone, hn) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö userId ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
  if (!userId || userId.toString().trim() === "") {
    Logger.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ - User ID ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${patientName}`);
    return;
  }

  const appointmentDateObj = new Date(appointmentDate);
  const formattedDate = formatThaiDate(appointmentDateObj);
  const formattedTime = time ? formatTime(time) : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤";
  
  Logger.log(`üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ User ID: ${userId}, ‡∏ä‡∏∑‡πà‡∏≠: ${patientName}`);
  
  const flexMessage = {
    "type": "flex",
    "altText": `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: ${patientName}`,
    "contents": {
      "type": "bubble",
      "size": "giga",
      "header": {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "text",
            "text": "üè• ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡πå",
            "weight": "bold",
            "size": "lg",
            "color": "#ffffff"
          }
        ],
        "backgroundColor": "#42C2FF",
        "paddingAll": "lg"
      },
      "body": {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": `‡∏Ñ‡∏∏‡∏ì${patientName}`,
                "size": "xl",
                "weight": "bold",
                "color": "#333333"
              },
              {
                "type": "text",
                "text": "‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≠‡∏ô‡∏±‡∏î‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÅ‡∏•‡πâ‡∏ß",
                "size": "sm",
                "color": "#666666",
                "margin": "xs"
              }
            ],
            "margin": "none"
          },
          {
            "type": "separator",
            "margin": "lg"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "text",
                    "text": "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î:",
                    "size": "sm",
                    "weight": "bold",
                    "color": "#333333",
                    "flex": 2
                  },
                  {
                    "type": "text",
                    "text": `‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ (${formattedDate})`,
                    "size": "sm",
                    "color": "#FF5551",
                    "weight": "bold",
                    "flex": 3
                  }
                ],
                "margin": "sm"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "text",
                    "text": "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤:",
                    "size": "sm",
                    "weight": "bold",
                    "color": "#333333",
                    "flex": 2
                  },
                  {
                    "type": "text",
                    "text": formattedTime,
                    "size": "sm",
                    "color": "#666666",
                    "flex": 3
                  }
                ],
                "margin": "sm"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "text",
                    "text": "ü©∫ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:",
                    "size": "sm",
                    "weight": "bold",
                    "color": "#333333",
                    "flex": 2
                  },
                  {
                    "type": "text",
                    "text": details || "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
                    "size": "sm",
                    "color": "#666666",
                    "wrap": true,
                    "flex": 3
                  }
                ],
                "margin": "sm"
              }
            ],
            "margin": "lg"
          }
        ],
        "paddingAll": "lg"
      },
      "footer": {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "box",
            "layout": "horizontal",
            "contents": [
              {
                "type": "text",
                "text": `HN: ${hn || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`,
                "size": "xs",
                "color": "#999999",
                "flex": 1
              },
              {
                "type": "text",
                "text": `Tel: ${phone || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`,
                "size": "xs",
                "color": "#999999",
                "flex": 1,
                "align": "end"
              }
            ]
          },
          {
            "type": "separator",
            "margin": "sm"
          },
          {
            "type": "text",
            "text": "üíä ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö",
            "size": "sm",
            "color": "#42C2FF",
            "weight": "bold",
            "align": "center",
            "margin": "sm"
          }
        ],
        "paddingAll": "lg"
      }
    }
  };

  const payload = {
    "to": userId,
    "messages": [flexMessage]
  };

  const options = {
    "method": "POST",
    "headers": {
      "Content-Type": "application/json",
      "Authorization": "Bearer " + CHANNEL_ACCESS_TOKEN
    },
    "payload": JSON.stringify(payload)
  };

  try {
    const response = UrlFetchApp.fetch("https://api.line.me/v2/bot/message/push", options);
    Logger.log(`‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ ${patientName}: ${response.getResponseCode()}`);
  } catch (error) {
    Logger.log(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ ${patientName}: ${error.toString()}`);
  }
}

function formatThaiDate2(date) {
  if (!date || !(date instanceof Date) || isNaN(date.getTime())) {
    return "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
  }

  const day = date.getDate();
  const month = MONTH_NAMES_TH[date.getMonth()];
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏µ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  let year = date.getFullYear();
  
  // ‡∏ñ‡πâ‡∏≤‡∏õ‡∏µ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®. ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2500) ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®. ‡∏Å‡πà‡∏≠‡∏ô
  if (year > 2500) {
    year = year - 543;
  }
  
  // ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  const buddhistYear = year + 543;
  
  Logger.log(`üìÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: ${date} -> ${day} ${month} ${buddhistYear}`);
  
  return `${day} ${month} ${buddhistYear}`;
}

function formatTime(time) {
  if (!time) return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤";
  
  // ‡∏ñ‡πâ‡∏≤ time ‡πÄ‡∏õ‡πá‡∏ô Date object
  if (time instanceof Date) {
    const hours = String(time.getHours()).padStart(2, '0');
    const minutes = String(time.getMinutes()).padStart(2, '0');
    return `${hours}:${minutes} ‡∏ô.`;
  }
  
  // ‡∏ñ‡πâ‡∏≤ time ‡πÄ‡∏õ‡πá‡∏ô string
  return time.toString() + (time.toString().includes('‡∏ô.') ? '' : ' ‡∏ô.');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï
function testMedicalReminders() {
  Logger.log("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢...");
  
  const ss = SpreadsheetApp.openById(SHEET_ID);
  const sheets = ss.getSheets();
  
  Logger.log("üìã ‡∏ä‡∏µ‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå:");
  sheets.forEach(sheet => {
    Logger.log("- " + sheet.getName());
  });
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö
  if (sheets.length > 0) {
    const testSheet = sheets[0];
    Logger.log(`üî¨ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï: ${testSheet.getName()}`);
    
    const lastRow = testSheet.getLastRow();
    if (lastRow >= 2) {
      const sampleData = testSheet.getRange("A2:I2").getValues()[0];
      Logger.log("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2:");
      Logger.log(`A (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î): ${sampleData[0]}`);
      Logger.log(`B (‡πÄ‡∏ß‡∏•‡∏≤): ${sampleData[1]}`);
      Logger.log(`C (HN): ${sampleData[2]}`);
      Logger.log(`D (‡∏ä‡∏∑‡πà‡∏≠): ${sampleData[3]}`);
      Logger.log(`E (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î): ${sampleData[4]}`);
      Logger.log(`F (‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£): ${sampleData[5]}`);
      Logger.log(`G (User ID): ${sampleData[6]}`);
      Logger.log(`H (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏): ${sampleData[7]}`);
      Logger.log(`I (‡∏ß‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô): ${sampleData[8]}`);
    }
  }
  
  Logger.log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á...");
  sendMedicalReminders();
  Logger.log("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Test User ID (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
function addTestUserId() {
  const ss = SpreadsheetApp.openById(SHEET_ID);
  const sheet = ss.getSheetByName("‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô"); // ‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  
  if (!sheet) {
    Logger.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô");
    return;
  }
  
  // ‡πÉ‡∏™‡πà User ID ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 6 (‡∏™‡∏°‡∏ä‡∏≤‡∏¢) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  const testUserId = "Ub7fb81c85b0bb6c8be5bbafdeeb7fb3b"; // ‡πÉ‡∏™‡πà User ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  sheet.getRange("G6").setValue(testUserId);
  
  Logger.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Test User ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß 6: ${testUserId}`);
  Logger.log("üí° ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß");
}
