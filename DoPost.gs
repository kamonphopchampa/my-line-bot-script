/**
 * ‡∏£‡∏ß‡∏° DoPost.gs - ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Webhook (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà)
 * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Constants ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå "‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå.gs" ‡πÅ‡∏•‡πâ‡∏ß
 */

/**
 * Main function to handle POST requests from LINE - ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function doPost(e) {
  try {
    const ss = SpreadsheetApp.openById(SHEET_ID);
    const userIdSheet = ss.getSheetByName("USER ID");
    const keywordSheet = ss.getSheetByName("‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î");
    
    const requestJSON = e.postData.contents;
    const requestObj = JSON.parse(requestJSON).events[0];
    const token = requestObj.replyToken;

    // Skip if this is a different event type or doesn't have a reply token
    if (!token || token === '00000000000000000000000000000000') {
      return ContentService.createTextOutput('OK').setMimeType(ContentService.MimeType.TEXT);
    }

    let userMessage = '';
    if (requestObj.message && requestObj.message.type === 'text') {
      userMessage = requestObj.message.text.trim();
    }

    const userId = requestObj.source.userId || requestObj.source.groupId;

    console.log('üì® Received message:', userMessage, 'from user:', userId);

    // ===== 1. ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ =====
    if (requestObj.type === 'message' || requestObj.type === 'follow') {
      const currentUserId = requestObj.source.userId;
      
      if (currentUserId) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userId ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏ô Sheet ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const lastRow = userIdSheet.getLastRow();
        const existingUserIds = lastRow >= 2 ? 
          userIdSheet.getRange('A2:A' + lastRow).getValues().flat() : [];
        
        if (!existingUserIds.includes(currentUserId)) {
          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å LINE API
          const profile = getUserProfile(currentUserId);
          const displayName = profile?.displayName || '';
          const pictureUrl = profile?.pictureUrl || '';

          // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß 2)
          const nextRow = lastRow + 1;

          // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A (userId), B (‡∏ä‡∏∑‡πà‡∏≠), C (‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ)
          userIdSheet.getRange(`A${nextRow}`).setValue(currentUserId);
          userIdSheet.getRange(`B${nextRow}`).setValue(displayName);
          userIdSheet.getRange(`C${nextRow}`).setValue(pictureUrl);
          
          console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà:', displayName, currentUserId);
        }
      }
    }

    // ===== 2. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Group =====
    if (requestObj.source.type === "group") {
      const groupId = requestObj.source.groupId;
      
      // Check if group exists in sheet
      const lastRow = userIdSheet.getLastRow();
      let groupExists = false;
      
      for (let i = 1; i <= lastRow; i++) {
        const existingGroupId = userIdSheet.getRange(i, 1).getValue();
        if (existingGroupId === groupId) {
          groupExists = true;
          break;
        }
      }

      // If group is new, record Group ID
      if (!groupExists) {
        userIdSheet.getRange(lastRow + 1, 1).setValue(groupId);
        userIdSheet.getRange(lastRow + 1, 2).setValue("Group");
        userIdSheet.getRange(lastRow + 1, 6).setValue(groupId);
        
        return replyMessage(token, "‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß Group ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠: " + groupId);
      }

      // Reply with Group ID if asked
      if (userMessage.toLowerCase() === "id ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£") {
        return replyMessage(token, "Group ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠: " + groupId);
      }

    } else if (requestObj.source.type === "user") {
      const userId = requestObj.source.userId;
      
      // Handle new friend (follow event)
      if (requestObj.type === "follow") {
        const userProfiles = getUserProfiles(userId);
        const currentDate = new Date();
        const formattedDate = formatThaiDate(currentDate);
        
        // Record user data in original columns (A-F)
        const lastRow = userIdSheet.getLastRow() + 1;
        userIdSheet.getRange(lastRow, 1).setValue(userId);
        userIdSheet.getRange(lastRow, 2).setValue(userProfiles[0]);
        userIdSheet.getRange(lastRow, 3).setValue(userProfiles[1]);
        userIdSheet.getRange(lastRow, 4).setFormula('=IMAGE(C' + lastRow + ')');
        userIdSheet.getRange(lastRow, 5).setValue(formattedDate);
        
        return replyMessage(token, "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô! ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö USER ID ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤\n ID ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£\n ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢");
      }
      
      // Reply with User ID if asked
      if (userMessage.toLowerCase() === "id ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£") {
        return replyMessage(token, "User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: " + userId);
      }
    }

    // ===== 3. ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ USER ID (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î) =====
    if (userMessage && userMessage.toLowerCase().startsWith("id ")) {
      const searchName = userMessage.substring(3).trim();
      console.log('üîç Processing USER ID search for:', searchName);
      return processUserIdSearch(token, searchName, userId, userIdSheet);
    }

    // ===== 4. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å USER ID ‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç =====
    if (userMessage && /^[1-9]$/.test(userMessage.trim())) {
      const selectedNumber = parseInt(userMessage.trim());
      console.log('üî¢ Processing number selection:', selectedNumber);
      
      const selectionResult = processNumberSelection(token, selectedNumber, userId, userIdSheet);
      if (selectionResult) {
        return selectionResult;
      }
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å USER ID ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
    }

    // ===== 5. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Postback =====
    if (requestObj.postback && requestObj.postback.data) {
      const postbackResult = handlePostbackEvents(token, requestObj.postback.data, userId, userIdSheet);
      if (postbackResult) {
        return postbackResult;
      }
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà postback ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö USER ID ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
    }

    // ===== 6. ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ =====
    if (typeof handleAppointmentBooking === 'function') {
      const appointmentResult = handleAppointmentBooking(userId, userMessage, token);
      if (appointmentResult) {
        console.log('üìÖ Appointment system handled the message');
        return appointmentResult;
      }
    }

    // ===== 7. ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô =====
    const calendarResult = handleCalendarSystem(requestObj, token, userMessage, userId);
    if (calendarResult) {
      console.log('üìÖ Calendar system handled the message');
      return calendarResult;
    }

    // ===== 8. ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô =====
    if (userMessage.startsWith("‡∏™‡∏£‡∏∏‡∏õ")) {
      const requestedMonth = userMessage.replace("‡∏™‡∏£‡∏∏‡∏õ", "").trim();
      if (typeof MONTH_NAMES_TH !== 'undefined') {
        const monthIndex = MONTH_NAMES_TH.findIndex(month => month === requestedMonth);
        
        if (monthIndex !== -1) {
          const sheetName = "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" + requestedMonth;
          if (ss.getSheetByName(sheetName)) {
            const flexMessage = createMonthlyReport(sheetName);
            return replyFlexMessage(token, flexMessage);
          } else {
            return replyMessage(token, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" + requestedMonth);
          }
        }
      }
    }
    
    // Handle request for all monthly reports
    if (userMessage.toLowerCase() === "‡∏™‡∏£‡∏∏‡∏õ") {
      if (typeof sendAllMonthlyReports === 'function') {
        return sendAllMonthlyReports(token);
      }
    }

    // ===== 9. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ =====
    if (userMessage && (userMessage.toLowerCase() === "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" || userMessage.toLowerCase() === "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")) {
      return showAllUsers(token, userIdSheet);
    }
    
    // ===== 10. Keyword responses =====
    if (userMessage && keywordSheet && typeof getKeywordResponse === 'function') {
      const keywordResponse = getKeywordResponse(userMessage, keywordSheet);
      if (keywordResponse) {
        return replyMessage(token, keywordResponse);
      }
    }
    
    // If no specific action is matched, don't reply
    console.log('‚ùì No system handled the message, ignoring');
    return ContentService.createTextOutput(JSON.stringify({'status': 'ok'})).setMimeType(ContentService.MimeType.JSON);
    
  } catch (error) {
    console.error('‚ùå Error in doPost:', error);
    return ContentService.createTextOutput(JSON.stringify({'status': 'error', 'message': error.toString()})).setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ USER ID - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function processUserIdSearch(token, searchName, requesterId, userIdSheet) {
  try {
    console.log('üîç Starting USER ID search for:', searchName, 'by:', requesterId);
    
    if (!searchName) {
      return replyMessage(token, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ID ‡∏Å‡∏°‡∏•‡∏†‡∏û");
    }

    const lastRow = userIdSheet.getLastRow();
    console.log('üìä Total rows in sheet:', lastRow);
    
    if (lastRow < 2) {
      return replyMessage(token, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A = USER ID, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B = ‡∏ä‡∏∑‡πà‡∏≠)
    const data = userIdSheet.getRange(2, 1, lastRow - 1, 2).getValues();
    console.log('üìã Data retrieved:', data.length, 'rows');
    
    const matches = findMatchingUsers(data, searchName);
    console.log('üìä Total matches found:', matches.length);
    
    if (matches.length === 0) {
      return showNoUserFoundMessage(token, searchName, data);
    }

    if (matches.length === 1) {
      // ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      return processSingleUserFound(token, matches[0], requesterId, userIdSheet);
    }

    // ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    return showUserSelectionList(token, matches, searchName, requesterId);
    
  } catch (error) {
    console.error('‚ùå Error in processUserIdSearch:', error);
    return replyMessage(token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: " + error.toString());
  }
}

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function findMatchingUsers(data, searchName) {
  const exactMatches = [];
  const partialMatches = [];
  
  for (let i = 0; i < data.length; i++) {
    const userId = data[i][0];
    const fullName = data[i][1];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ USER ID ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Group
    if (userId && fullName && fullName.toString().trim() !== "" && fullName.toString() !== "Group") {
      const nameStr = fullName.toString().trim();
      const searchStr = searchName.trim();
      
      console.log(`üìù Checking: "${nameStr}" against "${searchStr}"`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
      if (nameStr === searchStr || nameStr.toLowerCase() === searchStr.toLowerCase()) {
        // ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô 100%
        exactMatches.push({
          userId: userId.toString(),
          fullName: nameStr,
          matchType: 'exact',
          rowIndex: i + 2
        });
        console.log('‚úÖ Exact match found:', nameStr);
      }
      else if (nameStr.toLowerCase().includes(searchStr.toLowerCase()) || 
               searchStr.toLowerCase().includes(nameStr.toLowerCase())) {
        // ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°
        partialMatches.push({
          userId: userId.toString(),
          fullName: nameStr,
          matchType: 'contains',
          rowIndex: i + 2
        });
        console.log('üîç Partial match found:', nameStr);
      }
      else {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô "‡∏Å‡∏°‡∏•‡∏†‡∏û" ‡∏à‡∏∞‡πÄ‡∏à‡∏≠ "‡∏Å‡∏°‡∏•‡∏†‡∏û ‡∏à‡∏≥‡∏õ‡∏≤", "‡∏Å‡∏°‡∏•‡∏†‡∏û ‡∏à‡∏≥‡∏õ‡∏µ")
        const nameWords = nameStr.toLowerCase().split(/\s+/);
        const searchWords = searchStr.toLowerCase().split(/\s+/);
        
        let hasCommonWord = false;
        for (const searchWord of searchWords) {
          for (const nameWord of nameWords) {
            if (searchWord && nameWord && 
                (nameWord.includes(searchWord) || searchWord.includes(nameWord) || 
                 nameWord.startsWith(searchWord) || searchWord.startsWith(nameWord))) {
              hasCommonWord = true;
              break;
            }
          }
          if (hasCommonWord) break;
        }
        
        if (hasCommonWord) {
          partialMatches.push({
            userId: userId.toString(),
            fullName: nameStr,
            matchType: 'word_match',
            rowIndex: i + 2
          });
          console.log('üìù Word match found:', nameStr);
        }
      }
    }
  }

  // ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ exact matches ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
  const allMatches = [...exactMatches, ...partialMatches];
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö: exact matches ‡∏Å‡πà‡∏≠‡∏ô
  allMatches.sort((a, b) => {
    if (a.matchType === 'exact' && b.matchType !== 'exact') return -1;
    if (a.matchType !== 'exact' && b.matchType === 'exact') return 1;
    return 0;
  });

  return allMatches;
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function showNoUserFoundMessage(token, searchName, data) {
  let message = `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "${searchName}"\n\n`;
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (5 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å)
  const allNames = data.filter(row => row[1] && row[1].toString().trim() !== "" && row[1].toString() !== "Group")
                       .map(row => row[1].toString().trim())
                       .slice(0, 5);
  
  if (allNames.length > 0) {
    message += `üí° ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (${allNames.length > 5 ? '5 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å' : allNames.length + ' ‡∏Ñ‡∏ô'}):\n`;
    allNames.forEach((name, index) => {
      message += `${index + 1}. ${name}\n`;
    });
    message += `\nüìù ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤: ID ${allNames[0]}`;
  } else {
    message += `üí° ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`;
  }
  
  return replyMessage(token, message);
}

/**
 * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function processSingleUserFound(token, match, requesterId, userIdSheet) {
  console.log('‚úÖ Single user found:', match.fullName, match.userId);
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å USER ID ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G
  recordUserIdInColumnG(userIdSheet, requesterId, match.userId);
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢)
  if (typeof handleFoundUserId === 'function') {
    const autoSaveResult = handleFoundUserId(requesterId, match.userId, token);
    if (autoSaveResult) {
      return autoSaveResult;
    }
  }
  
  return replyMessage(token, 
    `‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${match.fullName}\n` +
    `üÜî USER ID: ${match.userId}\n\n` +
    `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å USER ID ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
  );
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function showUserSelectionList(token, matches, searchName, requesterId) {
  try {
    console.log('üìã Creating selection list for', matches.length, 'users');
    
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 9 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
    const displayMatches = matches.slice(0, 9);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    let messageText = `üîç ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${matches.length} ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö "${searchName}"\n\n`;
    messageText += `üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏û‡∏ö:\n`;
    
    displayMatches.forEach((match, index) => {
      const icon = match.matchType === 'exact' ? 'üéØ' : 'üîç';
      messageText += `${index + 1}. ${icon} ${match.fullName}\n`;
    });
    
    if (matches.length > 9) {
      messageText += `\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${matches.length - 9} ‡∏Ñ‡∏ô`;
    }
    
    messageText += `\n\nüëÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á`;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const options = displayMatches.map((match, index) => ({
      userId: match.userId,
      fullName: match.fullName,
      number: index + 1
    }));
    
    storeUserSelectionOptions(requesterId, options);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply
    const quickReplyItems = displayMatches.map((match, index) => {
      let displayName = match.fullName;
      if (displayName.length > 15) {
        displayName = displayName.substring(0, 12) + "...";
      }
      
      return {
        type: "action",
        action: {
          type: "message",
          label: `${index + 1}. ${displayName}`,
          text: `${index + 1}`
        }
      };
    });

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° Quick Reply
    const replyData = {
      replyToken: token,
      messages: [{
        type: "text",
        text: messageText,
        quickReply: {
          items: quickReplyItems
        }
      }]
    };

    console.log('üì§ Sending Quick Reply with', quickReplyItems.length, 'options');

    const response = UrlFetchApp.fetch('https://api.line.me/v2/bot/message/reply', {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + CHANNEL_ACCESS_TOKEN
      },
      method: 'POST',
      payload: JSON.stringify(replyData),
      muteHttpExceptions: true
    });

    const responseCode = response.getResponseCode();
    console.log('üì® Quick Reply response code:', responseCode);

    if (responseCode >= 200 && responseCode < 300) {
      console.log('‚úÖ Quick Reply sent successfully');
      return ContentService.createTextOutput(JSON.stringify({'status': 'ok'})).setMimeType(ContentService.MimeType.JSON);
    } else {
      console.log('‚ùå Quick Reply failed, response:', response.getContentText());
      
      // Fallback: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
      const fallbackMessage = messageText + `\n\nüìù ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-${displayMatches.length} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å`;
      return replyMessage(token, fallbackMessage);
    }
    
  } catch (error) {
    console.error('‚ùå Error in showUserSelectionList:', error);
    
    // Ultimate fallback
    const simpleMessage = `üîç ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${matches.length} ‡∏Ñ‡∏ô:\n\n` +
                         matches.slice(0, 5).map((match, i) => `${i + 1}. ${match.fullName}`).join('\n') +
                         `\n\nüìù ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-${Math.min(matches.length, 5)} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å`;
    
    return replyMessage(token, simpleMessage);
  }
}

/**
 * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function processNumberSelection(token, selectedNumber, requesterId, userIdSheet) {
  try {
    console.log('üî¢ Processing number selection:', selectedNumber, 'by:', requesterId);
    
    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
    const storedOptions = getUserSelectionOptions(requesterId);
    
    if (!storedOptions || storedOptions.length === 0) {
      console.log('‚ùå No stored selection options found');
      return null; // ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô)
    }
    
    console.log('üìã Found', storedOptions.length, 'stored options');
    
    if (selectedNumber < 1 || selectedNumber > storedOptions.length) {
      return replyMessage(token, `‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-${storedOptions.length}`);
    }
    
    const selectedOption = storedOptions[selectedNumber - 1];
    const selectedUserId = selectedOption.userId;
    const selectedName = selectedOption.fullName;
    
    console.log('üë§ User selected:', selectedName, 'ID:', selectedUserId);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å USER ID ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G
    recordUserIdInColumnG(userIdSheet, requesterId, selectedUserId);
    
    // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
    clearUserSelectionOptions(requesterId);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢)
    if (typeof handleFoundUserId === 'function') {
      const autoSaveResult = handleFoundUserId(requesterId, selectedUserId, token);
      if (autoSaveResult) {
        return autoSaveResult;
      }
    }
    
    return replyMessage(token, 
      `‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${selectedName}\n` +
      `üÜî USER ID: ${selectedUserId}\n\n` +
      `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å USER ID ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    );
    
  } catch (error) {
    console.error('‚ùå Error in processNumberSelection:', error);
    return replyMessage(token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Postback Events - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function handlePostbackEvents(token, postbackData, requesterId, userIdSheet) {
  try {
    console.log('üì≤ Handling postback:', postbackData);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (postbackData.startsWith("select_user_")) {
      const selectedUserId = postbackData.replace("select_user_", "");
      
      // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      const lastRow = userIdSheet.getLastRow();
      const data = userIdSheet.getRange(2, 1, lastRow - 1, 2).getValues();
      
      for (let i = 0; i < data.length; i++) {
        if (data[i][0] && data[i][0].toString() === selectedUserId) {
          const fullName = data[i][1] ? data[i][1].toString() : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠";
          
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å USER ID
          recordUserIdInColumnG(userIdSheet, requesterId, selectedUserId);
          
          // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
          clearUserSelectionOptions(requesterId);
          
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          if (typeof handleFoundUserId === 'function') {
            const autoSaveResult = handleFoundUserId(requesterId, selectedUserId, token);
            if (autoSaveResult) {
              return autoSaveResult;
            }
          }
          
          return replyMessage(token, 
            `‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${fullName}\n` +
            `üÜî USER ID: ${selectedUserId}\n\n` +
            `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å USER ID ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
          );
        }
      }
      
      return replyMessage(token, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å");
    }
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô)
    return handleCalendarPostback(postbackData, token, requesterId);
    
  } catch (error) {
    console.error('‚ùå Error in handlePostbackEvents:', error);
    return null;
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback ‡∏Ç‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function handleCalendarPostback(postbackData, token, userId) {
  try {
    if (postbackData.indexOf('prev_month_') === 0) {
      const parts = postbackData.split('_');
      const year = parseInt(parts[2]);
      const month = parseInt(parts[3]);
      const prevDate = new Date(year, month - 2, 1);
      const message = createCalendarFlexMessage(prevDate.getFullYear(), prevDate.getMonth() + 1);
      return replyFlexMessage(token, message);
    }
    
    if (postbackData.indexOf('next_month_') === 0) {
      const parts = postbackData.split('_');
      const year = parseInt(parts[2]);
      const month = parseInt(parts[3]);
      const nextDate = new Date(year, month, 1);
      const message = createCalendarFlexMessage(nextDate.getFullYear(), nextDate.getMonth() + 1);
      return replyFlexMessage(token, message);
    }
    
    if (postbackData.indexOf('select_date_') === 0) {
      const parts = postbackData.split('_');
      const year = parts[2];
      const month = parts[3];
      const day = parts[4];
      
      const selectedDate = year + '-' + padZero(month) + '-' + padZero(day);
      const displayDate = day + '/' + month + '/' + year;
      
      const calendarEvents = getDetailedCalendarEventsForDate(selectedDate);
      
      if (calendarEvents.length > 0) {
        const message = createEventDetailsFlexMessage(displayDate, calendarEvents);
        return replyFlexMessage(token, message);
      } else {
        const message = {
          type: 'text',
          text: 'üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ' + displayDate + '\n\n‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'
        };
        return replyMessage(token, message);
      }
    }

    return null;
    
  } catch (error) {
    console.error('‚ùå Error in handleCalendarPostback:', error);
    return null;
  }
}

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function handleCalendarSystem(requestObj, token, userMessage, userId) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (userMessage === '‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô' || userMessage === 'calendar') {
      const today = new Date();
      const message = createCalendarFlexMessage(today.getFullYear(), today.getMonth() + 1);
      return replyFlexMessage(token, message);
    }
    
    if (userMessage === '‡πÄ‡∏°‡∏ô‡∏π' || userMessage === 'menu') {
      const message = {
        type: 'text',
        text: 'üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n\n' +
              'üìÖ ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô - ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Calendar\n' +
              '‚ùì help - ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n' +
              'üî¢ 1-31 - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô\n' +
              'üìù ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢\n\n' +
              '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!'
      };
      return replyMessage(token, message);
    }
    
    if (userMessage.toLowerCase() === 'help' || userMessage === '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠') {
      const message = {
        type: 'text',
        text: 'üìÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô:\n\n' +
              'üîπ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô" - ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Calendar\n' +
              'üîπ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏°‡∏ô‡∏π" - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n' +
              'üîπ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-31 - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô\n' +
              'üîπ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢" - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢\n\n' +
              'üìã ‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:\n' +
              '‚Ä¢ 12/7/2568 - ‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 12 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568\n' +
              '‚Ä¢ 12 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568 - ‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞\n\n' +
              'üìã ‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:\n' +
              '‚Ä¢ 7/2568 - ‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568\n' +
              '‚Ä¢ ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568 - ‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n\n' +
              '‚ú® ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô\n' +
              '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'
      };
      return replyMessage(token, message);
    }
    
    if (userMessage === 'test' || userMessage === '‡∏ó‡∏î‡∏™‡∏≠‡∏ö') {
      const message = {
        type: 'text',
        text: '‚úÖ ‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!\n‡πÄ‡∏ß‡∏•‡∏≤: ' + new Date().toLocaleString('th-TH') + '\nUser ID: ' + userId
      };
      return replyMessage(token, message);
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏•‡∏≠‡∏¢‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
    if (userMessage && isDateFormatForCalendar(userMessage)) {
      return handleCalendarDateQuery(userMessage, token, userId);
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô) - ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å USER ID
    if (/^\d{1,2}$/.test(userMessage)) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å USER ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const storedOptions = getUserSelectionOptions(userId);
      if (storedOptions && storedOptions.length > 0) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å USER ID ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (return null)
        return null;
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å USER ID ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
      return handleCalendarDaySelection(userMessage, token, userId);
    }

    return null; // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
    
  } catch (error) {
    console.error('‚ùå Error in handleCalendarSystem:', error);
    return null;
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function handleCalendarDaySelection(userMessage, token, userId) {
  try {
    const day = parseInt(userMessage);
    const today = new Date();
    
    if (day >= 1 && day <= 31) {
      const year = today.getFullYear();
      const month = today.getMonth() + 1;
      const daysInCurrentMonth = new Date(year, month, 0).getDate();
      
      if (day <= daysInCurrentMonth) {
        const selectedDate = year + '-' + padZero(month) + '-' + padZero(day);
        const displayDate = day + '/' + month + '/' + year;
        
        const calendarEvents = getDetailedCalendarEventsForDate(selectedDate);
        
        if (calendarEvents.length > 0) {
          const message = createEventDetailsFlexMessage(displayDate, calendarEvents);
          return replyFlexMessage(token, message);
        } else {
          const message = {
            type: 'text',
            text: 'üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ' + displayDate + '\n\n‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'
          };
          return replyMessage(token, message);
        }
      } else {
        const message = {
          type: 'text',
          text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ' + day + ' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà'
        };
        return replyMessage(token, message);
      }
    }
    
    return null;
    
  } catch (error) {
    console.error('‚ùå Error in handleCalendarDaySelection:', error);
    return null;
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏•‡∏≠‡∏¢‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function handleCalendarDateQuery(userMessage, token, userId) {
  try {
    const parsedDate = parseThaiDateForCalendar(userMessage);
    
    if (parsedDate) {
      const year = parsedDate.year;
      const month = parsedDate.month;
      const day = parsedDate.day;
      
      if (day === 0) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        const message = createMonthlyEventsFlexMessage(month, year);
        return replyFlexMessage(token, message);
      } else {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        const selectedDate = year + '-' + padZero(month) + '-' + padZero(day);
        const displayDate = day + '/' + month + '/' + year;
        
        const calendarEvents = getDetailedCalendarEventsForDate(selectedDate);
        
        if (calendarEvents.length > 0) {
          const message = createEventDetailsFlexMessage(displayDate, calendarEvents);
          return replyFlexMessage(token, message);
        } else {
          const message = {
            type: 'text',
            text: 'üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ' + displayDate + '\n\n‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'
          };
          return replyMessage(token, message);
        }
      }
    } else {
      const message = {
        type: 'text',
        text: '‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:\n' +
              '‚Ä¢ 12/7/2568\n' +
              '‚Ä¢ 12 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568\n' +
              '‚Ä¢ 7/2568 (‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)\n' +
              '‚Ä¢ ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568 (‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)'
      };
      return replyMessage(token, message);
    }
    
  } catch (error) {
    console.error('‚ùå Error in handleCalendarDateQuery:', error);
    return null;
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function isDateFormatForCalendar(text) {
  const datePattern1 = /^\d{1,2}[\/\-\.]\d{1,2}[\/\-\.]\d{4}$/;
  const datePattern2 = /^\d{1,2}[\/\-\.]\d{4}$/;
  const thaiDatePattern = /^\d{1,2}\s+[‡∏Å-‡πô]+\s+\d{4}$/;
  const thaiMonthPattern = /^[‡∏Å-‡πô]+\s+\d{4}$/;
  
  return datePattern1.test(text) || datePattern2.test(text) || 
         thaiDatePattern.test(text) || thaiMonthPattern.test(text);
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function parseThaiDateForCalendar(text) {
  const thaiMonths = {
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°': 1, '‡∏°‡∏Ñ': 1, '‡∏°.‡∏Ñ.': 1,
    '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå': 2, '‡∏Å‡∏û': 2, '‡∏Å.‡∏û.': 2,
    '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°': 3, '‡∏°‡∏µ‡∏Ñ': 3, '‡∏°‡∏µ.‡∏Ñ.': 3,
    '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô': 4, '‡πÄ‡∏°‡∏¢': 4, '‡πÄ‡∏°.‡∏¢.': 4,
    '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°': 5, '‡∏û‡∏Ñ': 5, '‡∏û.‡∏Ñ.': 5,
    '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô': 6, '‡∏°‡∏¥‡∏¢': 6, '‡∏°‡∏¥.‡∏¢.': 6,
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°': 7, '‡∏Å‡∏Ñ': 7, '‡∏Å.‡∏Ñ.': 7,
    '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°': 8, '‡∏™‡∏Ñ': 8, '‡∏™.‡∏Ñ.': 8,
    '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô': 9, '‡∏Å‡∏¢': 9, '‡∏Å.‡∏¢.': 9,
    '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°': 10, '‡∏ï‡∏Ñ': 10, '‡∏ï.‡∏Ñ.': 10,
    '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô': 11, '‡∏û‡∏¢': 11, '‡∏û.‡∏¢.': 11,
    '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°': 12, '‡∏ò‡∏Ñ': 12, '‡∏ò.‡∏Ñ.': 12
  };
  
  try {
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: 12/7/2568
    const match1 = text.match(/^(\d{1,2})[\/\-\.](\d{1,2})[\/\-\.](\d{4})$/);
    if (match1) {
      const day = parseInt(match1[1]);
      const month = parseInt(match1[2]);
      const year = parseInt(match1[3]);
      const gregorianYear = year > 2500 ? year - 543 : year;
      
      if (month >= 1 && month <= 12 && day >= 1 && day <= 31) {
        return { day: day, month: month, year: gregorianYear };
      }
    }
    
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: 7/2568 (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ)
    const match2 = text.match(/^(\d{1,2})[\/\-\.](\d{4})$/);
    if (match2) {
      const month = parseInt(match2[1]);
      const year = parseInt(match2[2]);
      const gregorianYear = year > 2500 ? year - 543 : year;
      
      if (month >= 1 && month <= 12) {
        return { day: 0, month: month, year: gregorianYear };
      }
    }
    
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: 12 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568
    const match3 = text.match(/^(\d{1,2})\s+([‡∏Å-‡πô]+)\s+(\d{4})$/);
    if (match3) {
      const day = parseInt(match3[1]);
      const monthName = match3[2];
      const year = parseInt(match3[3]);
      const gregorianYear = year > 2500 ? year - 543 : year;
      
      const month = thaiMonths[monthName];
      if (month && day >= 1 && day <= 31) {
        return { day: day, month: month, year: gregorianYear };
      }
    }
    
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568 (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ)
    const match4 = text.match(/^([‡∏Å-‡πô]+)\s+(\d{4})$/);
    if (match4) {
      const monthName = match4[1];
      const year = parseInt(match4[2]);
      const gregorianYear = year > 2500 ? year - 543 : year;
      
      const month = thaiMonths[monthName];
      if (month) {
        return { day: 0, month: month, year: gregorianYear };
      }
    }
    
    return null;
  } catch (error) {
    console.error('Error parsing Thai date for calendar:', error);
    return null;
  }
}

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• USER ID =====

/**
 * ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function storeUserSelectionOptions(requesterId, options) {
  try {
    const properties = PropertiesService.getScriptProperties();
    const key = `user_selection_${requesterId}`;
    
    const data = {
      options: options,
      timestamp: new Date().getTime()
    };
    
    properties.setProperty(key, JSON.stringify(data));
    console.log('üíæ Stored user selection options for:', requesterId, 'count:', options.length);
    
  } catch (error) {
    console.error('‚ùå Error storing user selection options:', error);
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function getUserSelectionOptions(requesterId) {
  try {
    const properties = PropertiesService.getScriptProperties();
    const key = `user_selection_${requesterId}`;
    const storedData = properties.getProperty(key);
    
    if (!storedData) {
      return null;
    }
    
    const data = JSON.parse(storedData);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ)
    const now = new Date().getTime();
    const timeDiff = now - data.timestamp;
    
    if (timeDiff > 600000) { // 10 minutes
      properties.deleteProperty(key);
      console.log('‚åõ User selection options expired for:', requesterId);
      return null;
    }
    
    console.log('üìã Retrieved user selection options for:', requesterId, 'count:', data.options.length);
    return data.options;
    
  } catch (error) {
    console.error('‚ùå Error getting user selection options:', error);
    return null;
  }
}

/**
 * ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function clearUserSelectionOptions(requesterId) {
  try {
    const properties = PropertiesService.getScriptProperties();
    const key = `user_selection_${requesterId}`;
    properties.deleteProperty(key);
    console.log('üóëÔ∏è Cleared user selection options for:', requesterId);
  } catch (error) {
    console.error('‚ùå Error clearing user selection options:', error);
  }
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å USER ID ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function recordUserIdInColumnG(userIdSheet, requesterId, targetUserId) {
  try {
    console.log('üíæ Recording USER ID - Requester:', requesterId, 'Target:', targetUserId);
    
    const lastRow = userIdSheet.getLastRow();
    
    // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for (let i = 2; i <= lastRow; i++) {
      const userId = userIdSheet.getRange(i, 1).getValue();
      if (userId && userId.toString() === requesterId.toString()) {
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å USER ID ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G
        userIdSheet.getRange(i, 7).setValue(targetUserId);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H
        const currentTime = new Date();
        userIdSheet.getRange(i, 8).setValue(currentTime);
        
        console.log('‚úÖ Recorded USER ID in row', i, 'column G:', targetUserId);
        break;
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error in recordUserIdInColumnG:', error);
  }
}

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô =====

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LINE API - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function getUserProfile(userId) {
  const url = `https://api.line.me/v2/bot/profile/${userId}`;
  const options = {
    method: 'get',
    headers: {
      'Authorization': `Bearer ${CHANNEL_ACCESS_TOKEN}`
    },
    muteHttpExceptions: true
  };

  try {
    const response = UrlFetchApp.fetch(url, options);
    if (response.getResponseCode() === 200) {
      const profile = JSON.parse(response.getContentText());
      console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', profile.displayName);
      return profile;
    } else {
      console.log('‚ùå Error fetching profile:', response.getContentText());
      return null;
    }
  } catch (error) {
    console.log('‚ùå Fetch Error:', error);
    return null;
  }
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function showAllUsers(token, userIdSheet) {
  try {
    const lastRow = userIdSheet.getLastRow();
    
    if (lastRow < 2) {
      return replyMessage(token, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const data = userIdSheet.getRange(2, 1, lastRow - 1, 2).getValues();
    const validUsers = data.filter(row => 
      row[1] && 
      row[1].toString().trim() !== "" && 
      row[1].toString() !== "Group"
    );
    
    if (validUsers.length === 0) {
      return replyMessage(token, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
    }
    
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 20 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
    const displayUsers = validUsers.slice(0, 20);
    
    let message = `üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (${validUsers.length} ‡∏Ñ‡∏ô):\n\n`;
    
    displayUsers.forEach((row, index) => {
      const name = row[1].toString().trim();
      message += `${index + 1}. ${name}\n`;
    });
    
    if (validUsers.length > 20) {
      message += `\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${validUsers.length - 20} ‡∏Ñ‡∏ô`;
    }
    
    message += `\n\nüí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ID ‡∏ä‡∏∑‡πà‡∏≠\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ID ${displayUsers[0][1]}`;
    
    return replyMessage(token, message);
    
  } catch (error) {
    console.error('‚ùå Error in showAllUsers:', error);
    return replyMessage(token, "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: " + error.toString());
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET request
 */
function doGet(e) {
  return ContentService.createTextOutput('LINE Bot is running! Time: ' + new Date().toLocaleString('th-TH')).setMimeType(ContentService.MimeType.TEXT);
}

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô =====

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Calendar Flex Message ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Calendar
 */
function createCalendarFlexMessage(year, month) {
  var monthNames = [
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];
  
  var firstDay = new Date(year, month - 1, 1).getDay();
  var daysInMonth = new Date(year, month, 0).getDate();
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å Google Calendar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
  var monthlyEvents = getCalendarEventsForMonth(year, month);
  
  // Header ‡∏Ç‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
  var header = {
    type: "box",
    layout: "horizontal",
    contents: [
      {
        type: "text",
        text: "‚óÄ",
        action: {
          type: "postback",
          data: "prev_month_" + year + "_" + month
        },
        flex: 1,
        align: "center",
        color: "#0066CC",
        size: "lg",
        weight: "bold"
      },
      {
        type: "text",
        text: monthNames[month - 1] + " " + year,
        weight: "bold",
        size: "lg",
        align: "center",
        flex: 3
      },
      {
        type: "text",
        text: "‚ñ∂",
        action: {
          type: "postback",
          data: "next_month_" + year + "_" + month
        },
        flex: 1,
        align: "center",
        color: "#0066CC",
        size: "lg",
        weight: "bold"
      }
    ],
    paddingBottom: "md"
  };
  
  // ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
  var dayHeaders = {
    type: "box",
    layout: "horizontal",
    contents: [
      createDayHeader('‡∏≠‡∏≤'),
      createDayHeader('‡∏à'),
      createDayHeader('‡∏≠'),
      createDayHeader('‡∏û'),
      createDayHeader('‡∏û‡∏§'),
      createDayHeader('‡∏®'),
      createDayHeader('‡∏™')
    ],
    paddingBottom: "sm"
  };
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  var weeks = [];
  var currentWeek = [];
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å
  for (var i = 0; i < firstDay; i++) {
    currentWeek.push(createEmptyCell());
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  for (var day = 1; day <= daysInMonth; day++) {
    var hasEvent = monthlyEvents.hasOwnProperty(day);
    currentWeek.push(createDayCell(day, year, month, hasEvent));
    
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö 7 ‡∏ß‡∏±‡∏ô (‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)
    if (currentWeek.length === 7) {
      weeks.push({
        type: "box",
        layout: "horizontal",
        contents: currentWeek.slice(),
        paddingTop: "xs",
        paddingBottom: "xs"
      });
      currentWeek = [];
    }
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  while (currentWeek.length < 7 && currentWeek.length > 0) {
    currentWeek.push(createEmptyCell());
  }
  
  if (currentWeek.length > 0) {
    weeks.push({
      type: "box",
      layout: "horizontal",
      contents: currentWeek.slice(),
      paddingTop: "xs",
      paddingBottom: "xs"
    });
  }
  
  return {
    type: "flex",
    altText: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
    contents: {
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        contents: [header, dayHeaders].concat(weeks),
        spacing: "none",
        paddingAll: "lg"
      }
    }
  };
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡∏ß‡∏±‡∏ô
 */
function createDayHeader(day) {
  return {
    type: "text",
    text: day,
    size: "sm",
    align: "center",
    weight: "bold",
    flex: 1,
    color: "#999999"
  };
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏î‡πÑ‡∏î‡πâ (‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô)
 */
function createDayCell(day, year, month, hasEvent) {
  var textColor = "#0066CC";
  var backgroundColor = "#FFFFFF";
  
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ
  if (hasEvent) {
    textColor = "#FFFFFF";
    backgroundColor = "#FF6B6B"; // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  }
  
  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  var today = new Date();
  var isToday = (today.getFullYear() === year && 
                 today.getMonth() + 1 === month && 
                 today.getDate() === day);
  
  if (isToday && !hasEvent) {
    backgroundColor = "#E3F2FD"; // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  }
  
  return {
    type: "text",
    text: day.toString(),
    size: "md",
    align: "center",
    flex: 1,
    action: {
      type: "postback",
      data: "select_date_" + year + "_" + month + "_" + day
    },
    color: textColor,
    weight: isToday ? "bold" : "regular",
    backgroundColor: backgroundColor
  };
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
 */
function createEmptyCell() {
  return {
    type: "text",
    text: "„ÄÄ", // ‡πÉ‡∏ä‡πâ full-width space
    size: "md",
    align: "center",
    flex: 1,
    color: "#FFFFFF"
  };
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å Google Calendar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á
 */
function getCalendarEventsForMonth(year, month) {
  try {
    var calendar = CalendarApp.getCalendarById(APPOINTMENT_CALENDAR_ID);
    var startDate = new Date(year, month - 1, 1);
    var endDate = new Date(year, month, 0, 23, 59, 59);
    
    var events = calendar.getEvents(startDate, endDate);
    var eventsMap = {};
    
    for (var i = 0; i < events.length; i++) {
      var event = events[i];
      var eventDate = event.getStartTime();
      var day = eventDate.getDate();
      
      if (!eventsMap[day]) {
        eventsMap[day] = [];
      }
      eventsMap[day].push(event.getTitle());
    }
    
    return eventsMap;
  } catch (error) {
    console.error('Error getting calendar events for month:', error);
    return {};
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å Google Calendar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô)
 */
function getDetailedCalendarEventsForDate(dateString) {
  try {
    var calendar = CalendarApp.getCalendarById(APPOINTMENT_CALENDAR_ID);
    var date = new Date(dateString);
    var startDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    var endDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);
    
    var events = calendar.getEvents(startDate, endDate);
    var eventDetails = [];
    
    for (var i = 0; i < events.length; i++) {
      var event = events[i];
      var eventDetail = {
        title: event.getTitle(),
        description: event.getDescription() || '',
        location: event.getLocation() || '',
        startTime: event.getStartTime(),
        endTime: event.getEndTime(),
        isAllDay: event.isAllDayEvent(),
        guests: event.getGuestList().map(function(guest) { return guest.getEmail(); }),
        creator: event.getCreators()[0] || '',
        color: event.getColor() || CalendarApp.EventColor.BLUE
      };
      
      eventDetails.push(eventDetail);
    }
    
    return eventDetails;
  } catch (error) {
    console.error('Error getting detailed calendar events for date:', error);
    return [];
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
 */
function createEventDetailsFlexMessage(displayDate, events) {
  var bubbles = [];
  
  for (var i = 0; i < events.length; i++) {
    var event = events[i];
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    var headerColor = getEventHeaderColor(event.title);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
    var timeText = "";
    if (event.isAllDay) {
      timeText = "‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô";
    } else {
      timeText = Utilities.formatDate(event.startTime, Session.getScriptTimeZone(), 'HH:mm') + 
                ' - ' + 
                Utilities.formatDate(event.endTime, Session.getScriptTimeZone(), 'HH:mm');
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á bubble
    var bodyContents = [
      {
        type: "text",
        text: event.title,
        weight: "bold",
        size: "lg",
        color: "#333333",
        wrap: true,
        margin: "sm"
      }
    ];
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤
    bodyContents.push({
      type: "box",
      layout: "horizontal",
      contents: [
        {
          type: "text",
          text: "‚è∞",
          size: "md",
          flex: 0,
          color: "#FF6B6B"
        },
        {
          type: "text",
          text: timeText,
          size: "md",
          color: "#555555",
          flex: 1,
          weight: "bold",
          margin: "sm"
        }
      ],
      margin: "md"
    });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (event.location) {
      bodyContents.push({
        type: "box",
        layout: "horizontal",
        contents: [
          {
            type: "text",
            text: "üìç",
            size: "md",
            flex: 0,
            color: "#4ECDC4"
          },
          {
            type: "text",
            text: event.location,
            size: "sm",
            color: "#666666",
            flex: 1,
            wrap: true,
            margin: "sm"
          }
        ],
        margin: "md"
      });
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (event.description) {
      // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á
      var description = event.description;
      if (description.length > 80) {
        description = description.substring(0, 80) + "...";
      }
      
      bodyContents.push({
        type: "box",
        layout: "horizontal",
        contents: [
          {
            type: "text",
            text: "üìù",
            size: "md",
            flex: 0,
            color: "#45B7D1"
          },
          {
            type: "text",
            text: description,
            size: "sm",
            color: "#666666",
            flex: 1,
            wrap: true,
            margin: "sm"
          }
        ],
        margin: "md"
      });
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (event.creator) {
      bodyContents.push({
        type: "box",
        layout: "horizontal",
        contents: [
          {
            type: "text",
            text: "üë§",
            size: "md",
            flex: 0,
            color: "#A29BFE"
          },
          {
            type: "text",
            text: event.creator,
            size: "sm",
            color: "#666666",
            flex: 1,
            margin: "sm"
          }
        ],
        margin: "md"
      });
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (event.guests && event.guests.length > 0) {
      var guestText = event.guests.slice(0, 2).join(", ");
      if (event.guests.length > 2) {
        guestText += " ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å " + (event.guests.length - 2) + " ‡∏Ñ‡∏ô";
      }
      
      bodyContents.push({
        type: "box",
        layout: "horizontal",
        contents: [
          {
            type: "text",
            text: "üë•",
            size: "md",
            flex: 0,
            color: "#96CEB4"
          },
          {
            type: "text",
            text: guestText,
            size: "sm",
            color: "#666666",
            flex: 1,
            wrap: true,
            margin: "sm"
          }
        ],
        margin: "md"
      });
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    bodyContents.push({
      type: "separator",
      margin: "lg"
    });
    
    bodyContents.push({
      type: "text",
      text: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: " + Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'dd/MM/yyyy'),
      size: "xs",
      color: "#999999",
      align: "center",
      margin: "md"
    });
    
    var bubble = {
      type: "bubble",
      header: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢",
            weight: "bold",
            size: "md",
            color: "#FFFFFF"
          },
          {
            type: "text",
            text: "üìÖ " + displayDate,
            weight: "bold",
            size: "sm",
            color: "#FFFFFF",
            margin: "xs"
          }
        ],
        backgroundColor: headerColor,
        paddingAll: "lg"
      },
      body: {
        type: "box",
        layout: "vertical",
        contents: bodyContents,
        backgroundColor: "#FFFFFF",
        paddingAll: "lg"
      }
    };
    
    bubbles.push(bubble);
  }
  
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÉ‡∏ä‡πâ carousel
  if (bubbles.length > 1) {
    return {
      type: "flex",
      altText: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà " + displayDate,
      contents: {
        type: "carousel",
        contents: bubbles
      }
    };
  } else {
    return {
      type: "flex",
      altText: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà " + displayDate,
      contents: bubbles[0]
    };
  }
}

/**
 * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ô‡∏ä‡∏±‡∏î)
 */
function getEventHeaderColor(title) {
  var lowerTitle = title.toLowerCase();
  
  // ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
  if (lowerTitle.includes('‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°') || lowerTitle.includes('meeting')) {
    return "#E74C3C"; // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°
  }
  // ‡∏á‡∏≤‡∏ô‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°/‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô
  else if (lowerTitle.includes('‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°') || lowerTitle.includes('‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô') || lowerTitle.includes('visit')) {
    return "#1ABC9C"; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏¥‡πâ‡∏ô‡∏ó‡πå‡πÄ‡∏Ç‡πâ‡∏°
  }
  // ‡∏≠‡∏ö‡∏£‡∏°/‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°
  else if (lowerTitle.includes('‡∏≠‡∏ö‡∏£‡∏°') || lowerTitle.includes('‡∏ù‡∏∂‡∏Å') || lowerTitle.includes('training')) {
    return "#3498DB"; // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
  }
  // ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î/‡∏•‡∏≤
  else if (lowerTitle.includes('‡∏´‡∏¢‡∏∏‡∏î') || lowerTitle.includes('‡∏•‡∏≤') || lowerTitle.includes('holiday')) {
    return "#27AE60"; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°
  }
  // ‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î/‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ
  else if (lowerTitle.includes('‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î') || lowerTitle.includes('‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ') || lowerTitle.includes('party')) {
    return "#F39C12"; // ‡∏™‡∏µ‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏°
  }
  // ‡∏á‡∏≤‡∏ô‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠
  else if (lowerTitle.includes('‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠') || lowerTitle.includes('presentation')) {
    return "#9B59B6"; // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏°
  }
  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  else {
    return "#34495E"; // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
 */
function createMonthlyEventsFlexMessage(month, year) {
  var monthNames = [
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  var monthlyEvents = getCalendarEventsForMonth(year, month);
  var allEvents = getDetailedMonthlyEvents(year, month);
  
  if (allEvents.length === 0) {
    return {
      type: 'text',
      text: 'üìÖ ' + monthNames[month - 1] + ' ' + (year + 543) + '\n\n‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'
    };
  }
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  var eventsByDate = {};
  for (var i = 0; i < allEvents.length; i++) {
    var event = allEvents[i];
    var day = event.startTime.getDate();
    
    if (!eventsByDate[day]) {
      eventsByDate[day] = [];
    }
    eventsByDate[day].push(event);
  }
  
  var bubbles = [];
  var sortedDays = Object.keys(eventsByDate).sort(function(a, b) { return parseInt(a) - parseInt(b); });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á bubble ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô (‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏ß‡∏±‡∏ô)
  for (var i = 0; i < Math.min(sortedDays.length, 10); i++) {
    var day = sortedDays[i];
    var dayEvents = eventsByDate[day];
    var displayDate = day + '/' + month + '/' + year;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    var contents = [
      {
        type: "text",
        text: "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà " + day,
        weight: "bold",
        size: "lg",
        color: "#333333"
      }
    ];
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    for (var j = 0; j < Math.min(dayEvents.length, 5); j++) { // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
      var event = dayEvents[j];
      
      var timeText = "";
      if (event.isAllDay) {
        timeText = "‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô";
      } else {
        timeText = Utilities.formatDate(event.startTime, Session.getScriptTimeZone(), 'HH:mm') + 
                  '-' + 
                  Utilities.formatDate(event.endTime, Session.getScriptTimeZone(), 'HH:mm');
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
      contents.push({
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: event.title,
            weight: "bold",
            size: "sm",
            color: "#555555",
            wrap: true
          },
          {
            type: "box",
            layout: "horizontal",
            contents: [
              {
                type: "text",
                text: "‚è∞",
                size: "sm",
                flex: 0,
                color: "#FF6B6B"
              },
              {
                type: "text",
                text: timeText,
                size: "sm",
                color: "#666666",
                flex: 1,
                margin: "sm"
              }
            ]
          }
        ],
        margin: "md",
        paddingAll: "sm",
        backgroundColor: "#F8F9FA",
        cornerRadius: "md"
      });
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    if (dayEvents.length > 5) {
      contents.push({
        type: "text",
        text: "‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å " + (dayEvents.length - 5) + " ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°...",
        size: "xs",
        color: "#999999",
        align: "center",
        margin: "sm"
      });
    }
    
    var bubble = {
      type: "bubble",
      header: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: monthNames[month - 1] + " " + (year + 543),
            weight: "bold",
            size: "md",
            color: "#FFFFFF",
            align: "center"
          }
        ],
        backgroundColor: "#34495E",
        paddingAll: "lg"
      },
      body: {
        type: "box",
        layout: "vertical",
        contents: contents,
        paddingAll: "lg"
      },
      footer: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "button",
            action: {
              type: "postback",
              label: "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà " + day,
              data: "select_date_" + year + "_" + month + "_" + day
            },
            style: "primary",
            color: "#34495E"
          }
        ],
        paddingAll: "md"
      }
    };
    
    bubbles.push(bubble);
  }
  
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ß‡∏±‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  if (sortedDays.length > 10) {
    var additionalBubble = {
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
            weight: "bold",
            size: "lg",
            color: "#333333",
            align: "center"
          },
          {
            type: "text",
            text: "‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏µ‡∏Å " + (sortedDays.length - 10) + " ‡∏ß‡∏±‡∏ô\n‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" + monthNames[month - 1],
            size: "sm",
            color: "#666666",
            align: "center",
            wrap: true,
            margin: "md"
          }
        ],
        paddingAll: "lg"
      }
    };
    bubbles.push(additionalBubble);
  }
  
  return {
    type: "flex",
    altText: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô " + monthNames[month - 1] + " " + (year + 543),
    contents: {
      type: "carousel",
      contents: bubbles
    }
  };
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
 */
function getDetailedMonthlyEvents(year, month) {
  try {
    var calendar = CalendarApp.getCalendarById(APPOINTMENT_CALENDAR_ID);
    var startDate = new Date(year, month - 1, 1);
    var endDate = new Date(year, month, 0, 23, 59, 59);
    
    var events = calendar.getEvents(startDate, endDate);
    var eventDetails = [];
    
    for (var i = 0; i < events.length; i++) {
      var event = events[i];
      eventDetails.push({
        title: event.getTitle(),
        description: event.getDescription() || '',
        location: event.getLocation() || '',
        startTime: event.getStartTime(),
        endTime: event.getEndTime(),
        isAllDay: event.isAllDayEvent()
      });
    }
    
    return eventDetails;
  } catch (error) {
    console.error('Error getting detailed monthly events:', error);
    return [];
  }
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets
 */
function saveToGoogleSheets(date, userId) {
  try {
    var sheet = SpreadsheetApp.openById(SHEET_ID).getActiveSheet();
    var timestamp = new Date();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà
    sheet.appendRow([
      timestamp,           // ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      userId,             // LINE User ID
      date,               // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      '‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'         // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
    ]);
    
    console.log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + date);
  } catch (error) {
    console.error('Error saving to Google Sheets:', error);
  }
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô Google Calendar (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
 */
function addToGoogleCalendar(date, title) {
  try {
    var calendar = CalendarApp.getCalendarById(APPOINTMENT_CALENDAR_ID);
    var eventDate = new Date(date);
    
    calendar.createEvent(
      title || '‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å LINE OA',
      eventDate,
      eventDate,
      {
        description: '‡∏à‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô LINE OA Bot ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ' + new Date().toLocaleString('th-TH')
      }
    );
    
    console.log('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + date);
  } catch (error) {
    console.error('Error adding to Google Calendar:', error);
  }
}

// /**
//  * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ - ‡πÄ‡∏û‡∏¥‡πà‡∏° 0 ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏Ç
//  */
// function padZero(num) {
//   return num < 10 ? '0' + num : num.toString();
// }

// /**
//  * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Flex Message
//  */
// function replyFlexMessage(token, flexMessage) {
//   const replyData = {
//     replyToken: token,
//     messages: [flexMessage]
//   };

//   const response = UrlFetchApp.fetch('https://api.line.me/v2/bot/message/reply', {
//     headers: {
//       'Content-Type': 'application/json',
//       'Authorization': 'Bearer ' + CHANNEL_ACCESS_TOKEN
//     },
//     method: 'POST',
//     payload: JSON.stringify(replyData),
//     muteHttpExceptions: true
//   });

//   if (response.getResponseCode() >= 200 && response.getResponseCode() < 300) {
//     console.log('‚úÖ Flex message sent successfully');
//     return ContentService.createTextOutput(JSON.stringify({'status': 'ok'})).setMimeType(ContentService.MimeType.JSON);
//   } else {
//     console.log('‚ùå Error sending flex message:', response.getContentText());
//     return ContentService.createTextOutput(JSON.stringify({'status': 'error'})).setMimeType(ContentService.MimeType.JSON);
//   }
// }

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö =====

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ USER ID
 */
function testSearchSystem() {
  try {
    console.log('üß™ Testing USER ID search system...');
    
    const ss = SpreadsheetApp.openById(SHEET_ID);
    const userIdSheet = ss.getSheetByName("USER ID");
    
    if (!userIdSheet) {
      return { success: false, error: 'USER ID sheet not found' };
    }
    
    const lastRow = userIdSheet.getLastRow();
    console.log('üìä Total rows:', lastRow);
    
    if (lastRow >= 2) {
      const data = userIdSheet.getRange(2, 1, lastRow - 1, 2).getValues();
      const validUsers = data.filter(row => 
        row[1] && row[1].toString().trim() !== "" && row[1].toString() !== "Group"
      );
      
      console.log('üë• Valid users found:', validUsers.length);
      
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
      if (validUsers.length > 0) {
        const testName = "‡∏Å‡∏°‡∏•‡∏†‡∏û";
        const matches = findMatchingUsers(data, testName);
        
        console.log('üîç Test search for "‡∏Å‡∏°‡∏•‡∏†‡∏û":', matches.length, 'matches found');
        matches.forEach((match, index) => {
          console.log(`  ${index + 1}. ${match.fullName} (${match.matchType})`);
        });
      }
      
      return { 
        success: true, 
        totalRows: lastRow,
        validUsers: validUsers.length,
        sampleUsers: validUsers.slice(0, 5).map(row => row[1])
      };
    } else {
      return { success: false, error: 'No data found' };
    }
    
  } catch (error) {
    console.error('‚ùå Error in testSearchSystem:', error);
    return { success: false, error: error.toString() };
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
 */
function createTestEvents() {
  try {
    var calendar = CalendarApp.getCalendarById(APPOINTMENT_CALENDAR_ID);
    var today = new Date();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    var event1 = calendar.createEvent(
      '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤',
      new Date(today.getTime() + (1 * 24 * 60 * 60 * 1000)), // ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
      new Date(today.getTime() + (1 * 24 * 60 * 60 * 1000) + (2 * 60 * 60 * 1000)), // 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      {
        description: '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ï‡πà‡∏≠‡πÑ‡∏õ',
        location: '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° A ‡∏ä‡∏±‡πâ‡∏ô 3',
        guests: 'developer1@company.com,developer2@company.com'
      }
    );
    
    var event2 = calendar.createEvent(
      '‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ABC Corp',
      new Date(today.getTime() + (2 * 24 * 60 * 60 * 1000)), // ‡∏°‡∏∞‡∏£‡∏∑‡∏ô‡∏ô‡∏µ‡πâ
      new Date(today.getTime() + (2 * 24 * 60 * 60 * 1000) + (3 * 60 * 60 * 1000)), // 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      {
        description: '‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÇ‡∏ã‡∏•‡∏π‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏≤‡∏£‡∏∑‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
        location: '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ABC Corp ‡∏ä‡∏±‡πâ‡∏ô 15 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ XYZ',
        guests: 'sales@company.com,manager@company.com'
      }
    );
    
    var event3 = calendar.createEvent(
      '‡∏≠‡∏ö‡∏£‡∏°‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà',
      new Date(today.getTime() + (3 * 24 * 60 * 60 * 1000)), // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3
      new Date(today.getTime() + (3 * 24 * 60 * 60 * 1000) + (6 * 60 * 60 * 1000)), // 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      {
        description: '‡∏≠‡∏ö‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô AI ‡πÅ‡∏•‡∏∞ Machine Learning ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
        location: '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° Grand Palace ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏ç‡πà',
        guests: 'hr@company.com,all-staff@company.com'
      }
    );
    
    console.log('Created test events successfully');
    console.log('Event 1 ID:', event1.getId());
    console.log('Event 2 ID:', event2.getId());
    console.log('Event 3 ID:', event3.getId());
    
    return { 
      success: true, 
      events: [
        { id: event1.getId(), title: '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤' },
        { id: event2.getId(), title: '‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ABC Corp' },
        { id: event3.getId(), title: '‡∏≠‡∏ö‡∏£‡∏°‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà' }
      ]
    };
    
  } catch (error) {
    console.error('Error creating test events:', error);
    return { success: false, error: error.toString() };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
 */
function testCalendar() {
  try {
    var today = new Date();
    var calendar = createCalendarFlexMessage(today.getFullYear(), today.getMonth() + 1);
    console.log('üìÖ Calendar created successfully');
    console.log(JSON.stringify(calendar, null, 2));
    return { success: true, calendar: calendar };
  } catch (error) {
    console.error('Error testing calendar:', error);
    return { success: false, error: error.toString() };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Calendar
 */
function testCalendarEvents() {
  try {
    var today = new Date();
    var year = today.getFullYear();
    var month = today.getMonth() + 1;
    
    console.log('Testing calendar events for:', year, month);
    var events = getCalendarEventsForMonth(year, month);
    console.log('Events found:', JSON.stringify(events, null, 2));
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    var dateString = year + '-' + padZero(month) + '-' + padZero(today.getDate());
    console.log('Testing events for date:', dateString);
    var dayEvents = getDetailedCalendarEventsForDate(dateString);
    console.log('Day events:', JSON.stringify(dayEvents, null, 2));
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message
    if (dayEvents.length > 0) {
      var displayDate = today.getDate() + '/' + month + '/' + year;
      var flexMessage = createEventDetailsFlexMessage(displayDate, dayEvents);
      console.log('Flex Message created successfully');
    }
    
    return { 
      success: true, 
      monthlyEvents: events,
      dayEvents: dayEvents,
      testDate: dateString
    };
    
  } catch (error) {
    console.error('Error testing calendar events:', error);
    return { success: false, error: error.toString() };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
 */
function testMonthlyEvents() {
  try {
    var today = new Date();
    var year = today.getFullYear();
    var month = today.getMonth() + 1;
    
    console.log('Testing monthly events for:', month, year);
    var monthlyMessage = createMonthlyEventsFlexMessage(month, year);
    console.log('Monthly Events Message created successfully');
    
    return { 
      success: true, 
      message: monthlyMessage
    };
    
  } catch (error) {
    console.error('Error testing monthly events:', error);
    return { success: false, error: error.toString() };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
 */
function testDateFormats() {
  var testDates = [
    '12/7/2568',
    '12 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568', 
    '7/2568',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568',
    '25-12-2568',
    '1 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2569',
    'invalid date'
  ];
  
  console.log('Testing date formats:');
  var results = [];
  
  for (var i = 0; i < testDates.length; i++) {
    var testDate = testDates[i];
    var isValid = isDateFormatForCalendar(testDate);
    var parsed = parseThaiDateForCalendar(testDate);
    
    var result = {
      input: testDate,
      isValid: isValid,
      parsed: parsed
    };
    
    results.push(result);
    console.log(testDate + ':', 'isValid=' + isValid + ', parsed=' + JSON.stringify(parsed));
  }
  
/**
 * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
 */
function replyMessage2(token, message) {
  try {
    const replyData = {
      replyToken: token,
      messages: [typeof message === 'string' ? { type: 'text', text: message } : message]
    };

    const response = UrlFetchApp.fetch('https://api.line.me/v2/bot/message/reply', {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + CHANNEL_ACCESS_TOKEN
      },
      method: 'POST',
      payload: JSON.stringify(replyData),
      muteHttpExceptions: true
    });

    if (response.getResponseCode() >= 200 && response.getResponseCode() < 300) {
      console.log('‚úÖ Message sent successfully');
      return ContentService.createTextOutput(JSON.stringify({'status': 'ok'})).setMimeType(ContentService.MimeType.JSON);
    } else {
      console.log('‚ùå Error sending message:', response.getContentText());
      return ContentService.createTextOutput(JSON.stringify({'status': 'error'})).setMimeType(ContentService.MimeType.JSON);
    }
  } catch (error) {
    console.error('‚ùå Error in replyMessage:', error);
    return ContentService.createTextOutput(JSON.stringify({'status': 'error'})).setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
 */
function getUserProfiles(userId) {
  try {
    const profile = getUserProfile(userId);
    if (profile) {
      return [profile.displayName, profile.pictureUrl];
    }
    return ['Unknown User', ''];
  } catch (error) {
    console.error('Error getting user profiles:', error);
    return ['Unknown User', ''];
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
 */
function formatThaiDate(date) {
  try {
    const thaiMonths = [
      '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
      '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    ];
    
    const day = date.getDate();
    const month = thaiMonths[date.getMonth()];
    const year = date.getFullYear() + 543;
    
    return `${day} ${month} ${year}`;
  } catch (error) {
    console.error('Error formatting Thai date:', error);
    return date.toString();
  }
}

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° =====

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 */
function addTestUsers() {
  try {
    const ss = SpreadsheetApp.openById(SHEET_ID);
    const userIdSheet = ss.getSheetByName("USER ID");
    
    const sampleUsers = [
      ['U1111111111111111', '‡∏Å‡∏°‡∏•‡∏†‡∏û ‡∏à‡∏≥‡∏õ‡∏≤'],
      ['U2222222222222222', '‡∏Å‡∏°‡∏•‡∏†‡∏û ‡∏à‡∏≥‡∏õ‡∏µ'],
      ['U3333333333333333', '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ'],
      ['U4444444444444444', '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏î‡∏µ'],
      ['U5555555555555555', '‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏ó ‡∏™‡∏∏‡∏Ç‡πÉ‡∏™']
    ];
    
    const lastRow = userIdSheet.getLastRow();
    const nextRow = lastRow + 1;
    
    userIdSheet.getRange(nextRow, 1, sampleUsers.length, 2).setValues(sampleUsers);
    
    console.log('‚úÖ Added', sampleUsers.length, 'test users');
    return { success: true, addedUsers: sampleUsers.length };
    
  } catch (error) {
    console.error('‚ùå Error in addTestUsers:', error);
    return { success: false, error: error.toString() };
  }
}

/**
 * ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
 */
function removeTestUsers() {
  try {
    const ss = SpreadsheetApp.openById(SHEET_ID);
    const userIdSheet = ss.getSheetByName("USER ID");
    
    const lastRow = userIdSheet.getLastRow();
    const data = userIdSheet.getRange(2, 1, lastRow - 1, 2).getValues();
    
    let removedCount = 0;
    
    // ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ USER ID ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "U111111", "U222222" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
    for (let i = data.length - 1; i >= 0; i--) {
      const userId = data[i][0] ? data[i][0].toString() : '';
      if (userId.match(/^U[1-5]{15}$/)) {
        userIdSheet.deleteRow(i + 2);
        removedCount++;
      }
    }
    
    console.log('‚úÖ Removed', removedCount, 'test users');
    return { success: true, removedCount: removedCount };
    
  } catch (error) {
    console.error('‚ùå Error in removeTestUsers:', error);
    return { success: false, error: error.toString() };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
 */
function runCompleteTest() {
  try {
    console.log('üß™ Starting complete system test...');
    
    // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ USER ID
    console.log('üìã Testing USER ID search system...');
    const searchTest = testSearchSystem();
    
    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
    console.log('üìÖ Testing calendar system...');
    const calendarTest = testCalendar();
    
    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Calendar
    console.log('üìä Testing calendar events...');
    const eventsTest = testCalendarEvents();
    
    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    console.log('üìù Testing date formats...');
    const dateTest = testDateFormats();
    
    console.log('‚úÖ Complete test finished');
    
    return {
      success: true,
      results: {
        userSearch: searchTest,
        calendar: calendarTest,
        events: eventsTest,
        dateFormats: dateTest
      }
    };
    
  } catch (error) {
    console.error('‚ùå Error in complete test:', error);
    return { success: false, error: error.toString() };
  }
}
}
