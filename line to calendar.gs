/**
 * Line to Calendar.gs - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å LINE ‡πÑ‡∏õ Google Calendar
 * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Constants ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå "‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå.gs"
 */

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Constants)
const MONTH_NAMES_TH_LOCAL = [
  '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
  '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
];

// ‡πÉ‡∏ä‡πâ ACCESS_TOKEN ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå "‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå.gs"
const ACCESS_TOKEN = (typeof CHANNEL_ACCESS_TOKEN !== 'undefined') ? CHANNEL_ACCESS_TOKEN : null;

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
 */
function handleAppointmentBooking(userId, userMessage, token) {
  const ss = SpreadsheetApp.openById(SHEET_ID);
  
  // ‡πÉ‡∏ä‡πâ PropertiesService ‡πÅ‡∏ó‡∏ô global variable ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  const userProperties = PropertiesService.getScriptProperties();
  const userDataKey = 'appointment_' + userId;
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‡πÄ‡∏õ‡πá‡∏ô "‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"
  if (userMessage.toLowerCase() === "‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢") {
    userProperties.setProperty(userDataKey, JSON.stringify({ step: 'waiting_date' }));
    return replyMessage(token, "üìÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢\n\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:\n‚Ä¢ dd/mm/yyyy (‡πÄ‡∏ä‡πà‡∏ô 15/06/2568)\n‚Ä¢ dd.mm.yyyy (‡πÄ‡∏ä‡πà‡∏ô 15.06.2568)\n‚Ä¢ dd mm yyyy (‡πÄ‡∏ä‡πà‡∏ô 15 06 2568)\n‚Ä¢ dd ‡∏°.‡∏Ñ. yyyy (‡πÄ‡∏ä‡πà‡∏ô 15 ‡∏°.‡∏Ñ. 2568)\n‚Ä¢ dd ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° yyyy (‡πÄ‡∏ä‡πà‡∏ô 15 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2568)\n\nüí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏õ‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö ‡∏û.‡∏®. (‡πÄ‡∏ä‡πà‡∏ô 2568)\n\n‚ùå ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢");
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const userDataString = userProperties.getProperty(userDataKey);
  if (!userDataString) {
    return null; // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
  }

  let userData;
  try {
    userData = JSON.parse(userDataString);
  } catch (error) {
    Logger.log('Error parsing user data: ' + error);
    userProperties.deleteProperty(userDataKey);
    return replyMessage(token, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢'");
  }

  Logger.log('Current step: ' + userData.step + ', User message: ' + userMessage);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
  if (userMessage.toLowerCase() === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å") {
    userProperties.deleteProperty(userDataKey);
    return replyMessage(token, "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà");
  }

  switch (userData.step) {
    case 'waiting_date':
      const parsedDate = parseThaiDate(userMessage);
      Logger.log('Parsed date: ' + parsedDate);
      if (parsedDate) {
        userData.date = parsedDate;
        userData.step = 'waiting_time';
        userProperties.setProperty(userDataKey, JSON.stringify(userData));
        return replyMessage(token, "‚è∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢\n\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:\n‚Ä¢ hh:mm (‡πÄ‡∏ä‡πà‡∏ô 09:30)\n‚Ä¢ hh.mm (‡πÄ‡∏ä‡πà‡∏ô 09.30)\n‚Ä¢ h:mm (‡πÄ‡∏ä‡πà‡∏ô 9:30)\n‚Ä¢ h.mm (‡πÄ‡∏ä‡πà‡∏ô 9.30)\n\n‚ùå ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢");
      } else {
        return replyMessage(token, "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:\n‚Ä¢ 15/06/2568\n‚Ä¢ 15 ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô 2568\n‚Ä¢ 15 ‡∏°‡∏¥.‡∏¢. 2568\n\n‚ùå ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢");
      }

    case 'waiting_time':
      const parsedTime = parseTime(userMessage);
      Logger.log('Parsed time: ' + parsedTime);
      if (parsedTime) {
        userData.time = parsedTime;
        userData.step = 'waiting_hn';
        userProperties.setProperty(userDataKey, JSON.stringify(userData));
        return replyMessage(token, "üè• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç HN ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢\n\n‚ùå ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢");
      } else {
        return replyMessage(token, "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n‚Ä¢ 09:30\n‚Ä¢ 9.30\n‚Ä¢ 14:00\n\n‚ùå ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢");
      }

    case 'waiting_hn':
      userData.hn = userMessage.trim();
      userData.step = 'waiting_name';
      userProperties.setProperty(userDataKey, JSON.stringify(userData));
      return replyMessage(token, "üë§ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢\n\n‚ùå ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢");

    case 'waiting_name':
      userData.name = userMessage.trim();
      userData.step = 'waiting_phone';
      userProperties.setProperty(userDataKey, JSON.stringify(userData));
      return replyMessage(token, "üìû ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå\n\n‚ùå ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢");

    case 'waiting_phone':
      userData.phone = userMessage.trim();
      userData.step = 'waiting_detail';
      userProperties.setProperty(userDataKey, JSON.stringify(userData));
      return replyMessage(token, "üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢\n\n‚ùå ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢");

    case 'waiting_detail':
      userData.detail = userMessage.trim();
      userData.step = 'ready_to_save';
      userProperties.setProperty(userDataKey, JSON.stringify(userData));
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ USER ID
      const summaryMessage = `‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß!

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${userData.date}
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${userData.time}
üè• HN: ${userData.hn}
üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•: ${userData.name}
üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${userData.phone}
üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${userData.detail}

üîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:

1Ô∏è‚É£ ‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏û‡∏¥‡∏°‡∏û‡πå "ID" ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
   ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ID ‡∏Å‡∏°‡∏•‡∏†‡∏û, ID ‡∏™‡∏°‡∏ä‡∏≤‡∏¢

2Ô∏è‚É£ ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå: ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏Ç‡πâ‡∏≤‡∏°" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

‚ùå ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢`;

      return replyMessage(token, summaryMessage);

    case 'ready_to_save':
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏Ç‡πâ‡∏≤‡∏°" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (userMessage.toLowerCase() === "‡∏Ç‡πâ‡∏≤‡∏°") {
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        const saveResult = saveAppointmentData(userData, null);
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        userProperties.deleteProperty(userDataKey);
        
        if (saveResult.success) {
          const confirmMessage = createConfirmationMessage(userData, saveResult, false);
          return replyMessage(token, confirmMessage);
        } else {
          return replyMessage(token, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + saveResult.error);
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ USER ID (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ USER ID ‡πÉ‡∏ô DoPost.gs)
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ USER ID ‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handleFoundUserId() ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      
      return replyMessage(token, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n\n1Ô∏è‚É£ ‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ID ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤\n2Ô∏è‚É£ ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå: ‡∏Ç‡πâ‡∏≤‡∏°\n\n‚ùå ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢");

    default:
      userProperties.deleteProperty(userDataKey);
      return replyMessage(token, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢'");
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ USER ID ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö USER ID ‡πÅ‡∏•‡πâ‡∏ß
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 */
function handleFoundUserId(userId, customerUserId, token) {
  try {
    Logger.log('handleFoundUserId called - userId: ' + userId + ', customerUserId: ' + customerUserId);
    
    const userProperties = PropertiesService.getScriptProperties();
    const userDataKey = 'appointment_' + userId;
    const userDataString = userProperties.getProperty(userDataKey);
    
    if (!userDataString) {
      Logger.log('No appointment data found for user: ' + userId);
      return replyMessage(token, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢'");
    }
    
    let userData;
    try {
      userData = JSON.parse(userDataString);
    } catch (parseError) {
      Logger.log('Error parsing appointment data: ' + parseError);
      userProperties.deleteProperty(userDataKey);
      return replyMessage(token, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢'");
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô ready_to_save ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (userData.step !== 'ready_to_save') {
      Logger.log('User not in ready_to_save step: ' + userData.step);
      return null; // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    }
    
    Logger.log('Auto-saving appointment with customer ID: ' + customerUserId);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheet ‡πÅ‡∏•‡∏∞ Calendar
    const saveResult = saveAppointmentData(userData, customerUserId);
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    userProperties.deleteProperty(userDataKey);
    
    if (saveResult.success) {
      const confirmMessage = createConfirmationMessage(userData, saveResult, true);
      
      // ‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      const notificationResult = sendAppointmentNotificationToCustomer(customerUserId, userData);
      
      return replyMessage(token, confirmMessage);
    } else {
      return replyMessage(token, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + saveResult.error);
    }
    
  } catch (error) {
    Logger.log('Error in handleFoundUserId: ' + error.toString());
    return replyMessage(token, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: " + error.toString());
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á USER ID ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G
 */
function getCustomerUserIdFromColumnG(requesterId) {
  try {
    const ss = SpreadsheetApp.openById(SHEET_ID);
    const userIdSheet = ss.getSheetByName("USER ID");
    const lastRow = userIdSheet.getLastRow();
    
    // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for (let i = 2; i <= lastRow; i++) {
      const userId = userIdSheet.getRange(i, 1).getValue();
      if (userId && userId.toString() === requesterId.toString()) {
        const customerUserId = userIdSheet.getRange(i, 7).getValue(); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G
        Logger.log('Found customer USER ID in column G: ' + customerUserId);
        return customerUserId ? customerUserId.toString() : null;
      }
    }
    
    Logger.log('No customer USER ID found in column G for requester: ' + requesterId);
    return null;
    
  } catch (error) {
    Logger.log('Error getting customer USER ID from column G: ' + error.toString());
    return null;
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 */
function sendAppointmentNotificationToCustomer(customerUserId, userData) {
  try {
    Logger.log('Sending notification to customer: ' + customerUserId);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ACCESS_TOKEN
    if (!ACCESS_TOKEN) {
      Logger.log('ACCESS_TOKEN not available');
      return { success: false, error: 'ACCESS_TOKEN not available' };
    }
    
    const notificationMessage = `üè• ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢

‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${userData.date}
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${userData.time}
üè• HN: ${userData.hn}
üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•: ${userData.name}
üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${userData.detail}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏°‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡πà‡∏∞
‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ${userData.phone}

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ üôè`;

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const response = UrlFetchApp.fetch('https://api.line.me/v2/bot/message/push', {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + ACCESS_TOKEN
      },
      method: 'POST',
      payload: JSON.stringify({
        to: customerUserId,
        messages: [{
          type: "text",
          text: notificationMessage
        }]
      })
    });

    Logger.log('Notification sent to customer, response code: ' + response.getResponseCode());
    
    return {
      success: true,
      responseCode: response.getResponseCode()
    };
    
  } catch (error) {
    Logger.log('Error sending notification to customer: ' + error.toString());
    return {
      success: false,
      error: error.toString()
    };
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
 */
function parseThaiDate(dateString) {
  const cleanDate = dateString.trim();
  Logger.log('Input date string: ' + cleanDate);
  
  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dd/mm/yyyy ‡∏´‡∏£‡∏∑‡∏≠ dd.mm.yyyy ‡∏´‡∏£‡∏∑‡∏≠ dd mm yyyy
  const numericPattern = /^(\d{1,2})[\s\/\.](\d{1,2})[\s\/\.](\d{4})$/;
  const numericMatch = cleanDate.match(numericPattern);
  
  if (numericMatch) {
    const day = parseInt(numericMatch[1]);
    const month = parseInt(numericMatch[2]);
    const year = parseInt(numericMatch[3]);
    
    Logger.log('Numeric match - Day: ' + day + ', Month: ' + month + ', Year: ' + year);
    
    // ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
    const gregorianYear = year > 2400 ? year - 543 : year;
    
    if (day >= 1 && day <= 31 && month >= 1 && month <= 12) {
      const result = `${String(day).padStart(2, '0')}/${String(month).padStart(2, '0')}/${year}`;
      Logger.log('Returning numeric result: ' + result);
      return result;
    }
  }
  
  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dd ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô yyyy (‡πÄ‡∏ä‡πà‡∏ô 15 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2568 ‡∏´‡∏£‡∏∑‡∏≠ 15 ‡∏°.‡∏Ñ. 2568)
  const thaiMonthPattern = /^(\d{1,2})\s+(.+?)\s+(\d{4})$/;
  const thaiMatch = cleanDate.match(thaiMonthPattern);
  
  if (thaiMatch) {
    const day = parseInt(thaiMatch[1]);
    const monthName = thaiMatch[2].trim();
    const year = parseInt(thaiMatch[3]);
    
    Logger.log('Thai match - Day: ' + day + ', Month name: ' + monthName + ', Year: ' + year);
    
    // ‡∏´‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏ó‡∏¢
    const monthIndex = findThaiMonth(monthName);
    Logger.log('Month index found: ' + monthIndex);
    
    if (monthIndex !== -1 && day >= 1 && day <= 31) {
      const result = `${String(day).padStart(2, '0')}/${String(monthIndex + 1).padStart(2, '0')}/${year}`;
      Logger.log('Returning Thai result: ' + result);
      return result;
    }
  }
  
  Logger.log('No valid date format found');
  return null;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
 */
function findThaiMonth(monthName) {
  // ‡πÉ‡∏ä‡πâ MONTH_NAMES_TH ‡∏à‡∏≤‡∏Å Constants ‡∏´‡∏£‡∏∑‡∏≠ Local array
  const fullMonths = (typeof MONTH_NAMES_TH !== 'undefined') ? MONTH_NAMES_TH : MONTH_NAMES_TH_LOCAL;
  const shortMonths = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.', 
                     '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'];
  
  Logger.log('Looking for month: ' + monthName);
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°
  let index = fullMonths.findIndex(month => month === monthName);
  if (index !== -1) {
    Logger.log('Found full month at index: ' + index);
    return index;
  }
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠
  index = shortMonths.findIndex(month => month === monthName);
  if (index !== -1) {
    Logger.log('Found short month at index: ' + index);
    return index;
  }
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏¥‡∏î)
  for (let i = 0; i < fullMonths.length; i++) {
    if (fullMonths[i].includes(monthName) || monthName.includes(fullMonths[i])) {
      Logger.log('Found partial match at index: ' + i);
      return i;
    }
  }
  
  Logger.log('No month found');
  return -1;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
 */
function parseTime(timeString) {
  const cleanTime = timeString.trim();
  
  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö hh:mm ‡∏´‡∏£‡∏∑‡∏≠ h:mm ‡∏´‡∏£‡∏∑‡∏≠ hh.mm ‡∏´‡∏£‡∏∑‡∏≠ h.mm
  const timePattern = /^(\d{1,2})[\:\.](\d{2})$/;
  const match = cleanTime.match(timePattern);
  
  if (match) {
    const hour = parseInt(match[1]);
    const minute = parseInt(match[2]);
    
    if (hour >= 0 && hour <= 23 && minute >= 0 && minute <= 59) {
      return `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}:00`;
    }
  }
  
  return null;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheet ‡πÅ‡∏•‡∏∞ Calendar
 */
function saveAppointmentData(userData, customerUserId) {
  try {
    Logger.log('=== Starting saveAppointmentData ===');
    Logger.log('User data: ' + JSON.stringify(userData));
    Logger.log('Customer User ID: ' + customerUserId);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SHEET_ID ‡∏Å‡πà‡∏≠‡∏ô
    if (typeof SHEET_ID === 'undefined') {
      throw new Error('SHEET_ID is not defined');
    }
    Logger.log('SHEET_ID: ' + SHEET_ID);
    
    const ss = SpreadsheetApp.openById(SHEET_ID);
    Logger.log('Spreadsheet opened successfully');
    
    // ‡∏´‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const dateParts = userData.date.split('/');
    const month = parseInt(dateParts[1]);
    Logger.log('Month number: ' + month);
    
    // ‡πÉ‡∏ä‡πâ MONTH_NAMES_TH ‡∏à‡∏≤‡∏Å Constants ‡∏´‡∏£‡∏∑‡∏≠ Local array
    const monthNames = (typeof MONTH_NAMES_TH !== 'undefined') ? MONTH_NAMES_TH : MONTH_NAMES_TH_LOCAL;
    const monthName = monthNames[month - 1];
    Logger.log('Month name: ' + monthName);
    
    if (!monthName) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ Month index: ' + (month - 1));
    }
    
    // ‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Sheet ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô
    let monthSheet = ss.getSheetByName(monthName);
    Logger.log('Existing month sheet found: ' + (monthSheet !== null));
    
    if (!monthSheet) {
      Logger.log('Creating new sheet for month: ' + monthName);
      monthSheet = ss.insertSheet(monthName);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      const headers = [['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏ß‡∏•‡∏≤', 'HN', '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', 'Customer ID']];
      monthSheet.getRange(1, 1, 1, 7).setValues(headers);
      Logger.log('Header row created');
    }
    
    // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    const lastRow = monthSheet.getLastRow();
    const newRow = lastRow + 1;
    Logger.log('Writing to row: ' + newRow);
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ñ‡∏ß)
    const rowData = [
      userData.date,        // A: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      userData.time,        // B: ‡πÄ‡∏ß‡∏•‡∏≤  
      userData.hn,          // C: HN
      userData.name,        // D: ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•
      userData.detail,      // E: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      userData.phone,       // F: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
      customerUserId        // G: Customer ID
    ];
    
    Logger.log('Row data prepared: ' + JSON.stringify(rowData));
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    try {
      monthSheet.getRange(newRow, 1, 1, 7).setValues([rowData]);
      Logger.log('‚úÖ All data written to sheet successfully');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const verifyData = monthSheet.getRange(newRow, 1, 1, 7).getValues()[0];
      Logger.log('Verification - data in sheet: ' + JSON.stringify(verifyData));
      
    } catch (writeError) {
      Logger.log('‚ùå Error writing to sheet: ' + writeError.toString());
      Logger.log('Write error stack: ' + writeError.stack);
      throw writeError;
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Calendar
    Logger.log('Starting calendar save...');
    const calendarResult = saveToGoogleCalendar(userData);
    Logger.log('Calendar result: ' + JSON.stringify(calendarResult));
    
    const result = {
      success: true,
      sheetRow: newRow,
      calendarEvent: calendarResult,
      customerUserId: customerUserId,
      monthSheet: monthName,
      sheetData: rowData
    };
    
    Logger.log('=== saveAppointmentData completed successfully ===');
    Logger.log('Final result: ' + JSON.stringify(result));
    
    return result;
    
  } catch (error) {
    Logger.log('‚ùå Error saving appointment data: ' + error.toString());
    Logger.log('Error stack: ' + error.stack);
    return {
      success: false,
      error: error.toString(),
      errorStack: error.stack
    };
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Calendar
 */
function saveToGoogleCalendar(userData) {
  try {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    const dateParts = userData.date.split('/');
    const day = parseInt(dateParts[0]);
    const month = parseInt(dateParts[1]);
    const year = parseInt(dateParts[2]);
    
    // ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Calendar
    const gregorianYear = year > 2400 ? year - 543 : year;
    
    const timeParts = userData.time.split(':');
    const hour = parseInt(timeParts[0]);
    const minute = parseInt(timeParts[1]);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const startDate = new Date(gregorianYear, month - 1, day, hour, minute, 0);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏° 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
    const endDate = new Date(startDate.getTime() + (3 * 60 * 60 * 1000));
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    const eventTitle = `‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: ${userData.name}`;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    const description = `‡∏£‡∏´‡∏±‡∏™ HN: ${userData.hn}
‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•: ${userData.name}
‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠: ${userData.detail}
‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${userData.phone}`;
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Calendar
    const calendar = CalendarApp.getCalendarById(APPOINTMENT_CALENDAR_ID);
    const event = calendar.createEvent(eventTitle, startDate, endDate, {
      description: description,
      location: '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•'
    });
    
    Logger.log('Calendar event created: ' + event.getId());
    
    return {
      success: true,
      eventId: event.getId(),
      startTime: startDate,
      endTime: endDate
    };
    
  } catch (error) {
    Logger.log('Error creating calendar event: ' + error.toString());
    return {
      success: false,
      error: error.toString()
    };
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 */
function createConfirmationMessage(userData, saveResult, withNotification = true) {
  let message = `‚úÖ ‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${userData.date}
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${userData.time}
üè• HN: ${userData.hn}
üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•: ${userData.name}
üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${userData.phone}
üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${userData.detail}

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô Google Sheet ‡πÅ‡∏•‡∏∞ Google Calendar ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`;

  if (withNotification && saveResult.customerUserId) {
    message += `\n\nüì± ‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`;
  } else if (!withNotification) {
    message += `\n\nüìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô`;
  }

  return message;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
 */
function testAppointmentSystem() {
  const testData = {
    date: "15/06/2568",
    time: "09:30:00",
    hn: "HN123456",
    name: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö",
    phone: "081-234-5678",
    detail: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ"
  };
  
  const result = saveAppointmentData(testData, "test_customer_id");
  Logger.log('Test result: ' + JSON.stringify(result));
  
  return result;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Google Sheet
 */
function testSheetWriteOnly() {
  try {
    Logger.log('=== Testing Sheet Write Only ===');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SHEET_ID
    if (typeof SHEET_ID === 'undefined') {
      Logger.log('‚ùå SHEET_ID is not defined');
      return { success: false, error: 'SHEET_ID not defined' };
    }
    
    Logger.log('‚úÖ SHEET_ID found: ' + SHEET_ID);
    
    const ss = SpreadsheetApp.openById(SHEET_ID);
    Logger.log('‚úÖ Spreadsheet opened');
    
    // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á sheet ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testSheetName = '‡∏ó‡∏î‡∏™‡∏≠‡∏ö_' + new Date().getTime();
    const testSheet = ss.insertSheet(testSheetName);
    Logger.log('‚úÖ Test sheet created: ' + testSheetName);
    
    // ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testData = [['A1', 'B1', 'C1'], ['A2', 'B2', 'C2']];
    testSheet.getRange(1, 1, 2, 3).setValues(testData);
    Logger.log('‚úÖ Test data written');
    
    // ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    const readData = testSheet.getRange(1, 1, 2, 3).getValues();
    Logger.log('‚úÖ Test data read back: ' + JSON.stringify(readData));
    
    // ‡∏•‡∏ö sheet ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    ss.deleteSheet(testSheet);
    Logger.log('‚úÖ Test sheet deleted');
    
    return { 
      success: true, 
      message: 'Sheet write test passed',
      testData: readData 
    };
    
  } catch (error) {
    Logger.log('‚ùå Sheet test error: ' + error.toString());
    return { 
      success: false, 
      error: error.toString(),
      stack: error.stack 
    };
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Constants ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function checkConstants() {
  const constants = {
    SHEET_ID: typeof SHEET_ID !== 'undefined' ? SHEET_ID : 'NOT DEFINED',
    ACCESS_TOKEN: typeof ACCESS_TOKEN !== 'undefined' ? 'DEFINED' : 'NOT DEFINED',
    CHANNEL_ACCESS_TOKEN: typeof CHANNEL_ACCESS_TOKEN !== 'undefined' ? 'DEFINED' : 'NOT DEFINED',
    APPOINTMENT_CALENDAR_ID: typeof APPOINTMENT_CALENDAR_ID !== 'undefined' ? APPOINTMENT_CALENDAR_ID : 'NOT DEFINED',
    MONTH_NAMES_TH: typeof MONTH_NAMES_TH !== 'undefined' ? 'DEFINED' : 'NOT DEFINED'
  };
  
  Logger.log('Constants check: ' + JSON.stringify(constants));
  return constants;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
 */
function clearAllAppointmentData() {
  try {
    const properties = PropertiesService.getScriptProperties();
    const allProperties = properties.getProperties();
    
    let clearedCount = 0;
    for (const key in allProperties) {
      if (key.startsWith('appointment_')) {
        properties.deleteProperty(key);
        clearedCount++;
      }
    }
    
    Logger.log('Cleared ' + clearedCount + ' appointment properties');
    return { success: true, clearedCount: clearedCount };
    
  } catch (error) {
    Logger.log('Error clearing appointment data: ' + error);
    return { success: false, error: error.toString() };
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏µ‡∏ö‡∏±‡∏Å)
 */
function viewPendingAppointments() {
  try {
    const properties = PropertiesService.getScriptProperties();
    const allProperties = properties.getProperties();
    
    const appointments = {};
    for (const key in allProperties) {
      if (key.startsWith('appointment_')) {
        try {
          appointments[key] = JSON.parse(allProperties[key]);
        } catch (parseError) {
          appointments[key] = allProperties[key];
        }
      }
    }
    
    Logger.log('Pending appointments: ' + JSON.stringify(appointments));
    return appointments;
    
  } catch (error) {
    Logger.log('Error viewing pending appointments: ' + error);
    return { error: error.toString() };
  }
}
